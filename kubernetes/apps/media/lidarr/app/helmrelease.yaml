---
# yaml-language-server: $schema=https://raw.githubusercontent.com/bjw-s/helm-charts/main/charts/other/app-template/schemas/helmrelease-helm-v2.schema.json
apiVersion: helm.toolkit.fluxcd.io/v2
kind: HelmRelease
metadata:
  name: &app lidarr
spec:
  interval: 1h
  chartRef:
    kind: OCIRepository
    name: app-template
  install:
    remediation:
      retries: -1
  upgrade:
    cleanupOnFail: true
    remediation:
      retries: 3
  values:
    controllers:
      lidarr:
        annotations:
          reloader.stakater.com/auto: "true"
        initContainers:
          init-db:
            image:
              repository: ghcr.io/home-operations/postgres-init
              tag: 17.6.0
            envFrom: &envFrom
              - secretRef:
                  name: lidarr-secret
              - secretRef:
                  name: cluster-secrets
        containers:
          app:
            image:
              repository: ghcr.io/home-operations/lidarr
              tag: 2.14.1.4755@sha256:c8d5d440df15ce861a8c7b4c9253f9aec59a71d15c26883f9f884a07322c430c
            env:
              LIDARR__APP__INSTANCENAME: Lidarr
              LIDARR__APP__THEME: dark
              LIDARR__AUTH__METHOD: External
              LIDARR__AUTH__REQUIRED: DisabledForLocalAddresses
              LIDARR__LOG__DBENABLED: "False"
              LIDARR__LOG__LEVEL: info
              LIDARR__SERVER__PORT: &port 8686
              LIDARR__UPDATE__BRANCH: develop
              TZ: ${TIMEZONE}
            envFrom: *envFrom
            probes:
              liveness: &probes
                enabled: true
                custom: true
                spec:
                  httpGet:
                    path: /ping
                    port: *port
                  initialDelaySeconds: 0
                  periodSeconds: 10
                  timeoutSeconds: 1
                  failureThreshold: 3
              readiness: *probes
            securityContext:
              allowPrivilegeEscalation: false
              readOnlyRootFilesystem: true
              capabilities: { drop: ["ALL"] }
            resources:
              requests:
                cpu: 100m
                memory: 64Mi
              limits:
                memory: 384Mi
    defaultPodOptions:
      securityContext:
        runAsNonRoot: true
        runAsUser: 568
        runAsGroup: 568
        fsGroup: 568
        fsGroupChangePolicy: OnRootMismatch
        supplementalGroups: [10000]
        seccompProfile: { type: RuntimeDefault }
      affinity:
        nodeAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
            nodeSelectorTerms:
            - matchExpressions:
              - key: node-role.kubernetes.io/worker
                operator: In
                values:
                - worker
          preferredDuringSchedulingIgnoredDuringExecution:
          - weight: 1
            preference:
              matchExpressions:
              - key: kubernetes.io/arch
                operator: In
                values:
                - arm64
    service:
      app:
        controller: lidarr
        ports:
          http:
            port: *port
#    ingress:
#      app:
#        annotations:
#          gethomepage.dev/enabled: "true"
#          gethomepage.dev/group: Downloads
#          gethomepage.dev/name: Lidarr
#          gethomepage.dev/icon: lidarr.png
#          gethomepage.dev/widget.type: lidarr
#          gethomepage.dev/widget.url: http://lidarr.media
#          gethomepage.dev/widget.key: "{{`{{HOMEPAGE_VAR_LIDARR_TOKEN}}`}}"
#          external-dns.alpha.kubernetes.io/target: internal.${SECRET_DOMAIN}
#        className: internal
#        hosts:
#          - host: "{{ .Release.Name }}.${SECRET_DOMAIN}"
#            paths:
#              - path: /
#                service:
#                  identifier: app
#                  port: http

    route:
      app:
        annotations:
          gethomepage.dev/enabled: "true"
          gethomepage.dev/group: Downloads
          gethomepage.dev/name: Lidarr
          gethomepage.dev/icon: lidarr.png
          gethomepage.dev/widget.type: lidarr
          gethomepage.dev/widget.url: http://lidarr.media:8686
          gethomepage.dev/widget.key: "{{`{{HOMEPAGE_VAR_LIDARR_TOKEN}}`}}"
        hostnames: ["{{ .Release.Name }}.${SECRET_DOMAIN}"]
        parentRefs:
          - name: internal
            namespace: kube-system
            sectionName: https
        rules:
          - backendRefs:
              - identifier: app
                port: *port

    persistence:
      config:
        existingClaim: lidarr
      scripts:
        type: configMap
        name: lidarr-configmap
        defaultMode: 0775
        globalMounts:
          - path: /scripts/pushover-notify.sh
            subPath: pushover-notify.sh
            readOnly: true
      tmp:
        type: emptyDir
      media:
        enabled: true
        type: nfs
        server: ${NAS_IP}
        path: /volume2/piNFS01/flux-cluster/media_new
        globalMounts:
          - path: /media
