---
# yaml-language-server: $schema=https://raw.githubusercontent.com/bjw-s/helm-charts/main/charts/other/app-template/schemas/helmrelease-helm-v2.schema.json
apiVersion: helm.toolkit.fluxcd.io/v2
kind: HelmRelease
metadata:
  name: &app tdarr

spec:

  interval: 1h
  chartRef:
    kind: OCIRepository
    name: app-template
  install:
    remediation:
      retries: -1
  upgrade:
    cleanupOnFail: true
    remediation:
      retries: 3

  values:
    defaultPodOptions:
      securityContext:
#        runAsUser: 0
#        runAsGroup: 0
        fsGroup: 1000
        fsGroupChangePolicy: "OnRootMismatch"
        supplementalGroups:
          - 44 # video
          - 125 # render
          - 105 # render
          - 568
      nodeSelector:
        intel.feature.node.kubernetes.io/gpu: "true"

    controllers:
      tdarr:
        containers:
          app:
            image:
              repository: ghcr.io/haveagitgat/tdarr
              tag: 2.45.01
            env:
              TZ: Australia/Melbourne
            resources:
              requests:
                cpu: 50m
                memory: 256Mi
              limits:
                memory: 2Gi

    service:
      app:
        controller: *app
        ports:
          http:
            port: &port 8265
      server:
        controller: *app
        type: LoadBalancer
        annotations:
          lbipam.cilium.io/ips: 10.200.15.242
        externalTrafficPolicy: Cluster
        ports:
          server:
            enabled: true
            protocol: TCP
            port: 8266

    route:
      app:
        annotations:
          gethomepage.dev/enabled: "true"
          gethomepage.dev/group: Video
          gethomepage.dev/name: Tdarr
          gethomepage.dev/icon: tdarr.png
          gethomepage.dev/description: Distributed transcode automation
        hostnames: ["{{ .Release.Name }}.${SECRET_DOMAIN}"]
        parentRefs:
          - name: internal
            namespace: kube-system
            sectionName: https
        rules:
          - backendRefs:
              - identifier: app
                port: *port

    persistence:
      config:
        enabled: true
        existingClaim: tdarr-config
        advancedMounts:
          tdarr:
            app:
              - path: /app/configs
                subPath: config
              - path: /app/server
                subPath: server

#      cache:
#        existingClaim: tdarr-cache
#        globalMounts:
#          - path: /cache

#      media:
#        enabled: true
#        existingClaim: nfs-media

      movies:
        type: nfs
        server: ${NAS_IP:=temp}
        path: /volume2/piNFS01/flux-cluster/media_new/media/Movies
        globalMounts:
          - path: /mnt/movies

      tv:
        type: nfs
        server: ${NAS_IP:=temp}
        path: "/volume2/piNFS01/flux-cluster/media_new/media/TV Shows"
        globalMounts:
          - path: /mnt/tv

      other-videos:
        type: nfs
        server: ${NAS_IP:=temp}
        path: "/volume2/piNFS01/flux-cluster/media_new/media/Other Videos"
        globalMounts:
          - path: /mnt/other-videos

#      backups:
#        enabled: true
#        type: custom
#        volumeSpec:
#          nfs:
#            server: "${QNAP_ADDR}"
#            path: /plexbackups/backups/tdarr
#        globalMounts:
#          - path: /app/server/Tdarr/Backups
#            readOnly: false
