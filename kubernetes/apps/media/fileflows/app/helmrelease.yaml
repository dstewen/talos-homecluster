---
# yaml-language-server: $schema=https://raw.githubusercontent.com/bjw-s/helm-charts/main/charts/other/app-template/schemas/helmrelease-helm-v2.schema.json
apiVersion: helm.toolkit.fluxcd.io/v2
kind: HelmRelease
metadata:
  name: &app fileflows
spec:
  interval: 1h
  chartRef:
    kind: OCIRepository
    name: app-template
  install:
    remediation:
      retries: -1
  upgrade:
    cleanupOnFail: true
    remediation:
      retries: 3
  values:
    annotations:
      reloader.stakater.com/auto: "true"
    defaultPodOptions:
      securityContext:
        runAsUser: 568
        runAsGroup: 568
        fsGroup: 568
        fsGroupChangePolicy: OnRootMismatch
        supplementalGroups:
          - 44 # video
          - 125 # render
          - 105 # render
          - 568
        seccompProfile: { type: RuntimeDefault }

    controllers:
      server:
#        initContainers:
#          init-dirs:
#            image:
#              repository: busybox
#              tag: latest
#            command:
#              - sh
#              - -c
#              - |
#                mkdir -p /app/Data /app/Logs /app/ManuallyAdded /temp
#                chown -R 0:0 /app /temp
#            securityContext:
#              runAsUser: 0

        initContainers:
          # For some dumb reason the application tries to open and save this file even if there are no changes.
          # This requires that the file is writable by the application.
          preload:
            image:
              repository: public.ecr.aws/docker/library/alpine
              tag: 3.22.0
            command:
              - /preload/scripts/preload.sh
        pod:
          securityContext:
            runAsNonRoot: true
            runAsUser: 1000
            runAsGroup: 1000
            fsGroup: 1000

        containers:
          app:
            image: &image
              repository: docker.io/revenz/fileflows
              tag: 25.07@sha256:8127cb349701bf5c8298d6e75f6e1523e59ec5197b6906996c76cd3e9b63c820
            args:
              - --urls=http://*:5000
              - --docker
            env: &server_env
              # Causes config files at `/Data/Data/Config/<num>/config.json` to not be encrypted.
              # Without this, the config file is encrypted using the contents of /etc/machine-id as the
              # password. This is flawed because the key _is baked into the image_. Just disable
              # encryption - it adds zero benefit here, and makes it so that I cannot easily load these
              # config files on startup.
              FF_NO_ENCRYPT: "1"
              TZ: ${TIMEZONE}
            ports:
              - name: http
                containerPort: 5000
            probes:
              startup: &probe
                enabled: true
                path: /health
                port: http
              readiness: *probe
              liveness: *probe
            securityContext: &fileflows_security_context
              allowPrivilegeEscalation: false
              # Cannot be enabled until https://fileflows.com/ticket?id=2271 is fixed
              # readOnlyRootFilesystem: true
              capabilities:
                drop:
                  - ALL
            resources:
              requests:
                cpu: 10m
                memory: 512Mi
                gpu.intel.com/i915: 1
              limits:
                cpu: 1
                memory: 2Gi
                gpu.intel.com/i915: 1

      worker:
        replicas: 2
        type: statefulset
        containers:
          app:
            image: *image
            args:
              - --docker
            env:
              <<: *server_env
              FFNODE: "1" # This is a worker node, not a server.
              ServerUrl: http://fileflows.media.svc
              POD_NAME:
                valueFrom:
                  fieldRef:
                    fieldPath: metadata.name
            securityContext: *fileflows_security_context
        pod:
          securityContext:
            runAsNonRoot: true
            runAsUser: 1000
            runAsGroup: 1000
            fsGroup: 1000


    service:
#      app:
#        controller: *app
#        ports:
#          http:
#            port: &port 19200
      server:
        controller: server
        type: LoadBalancer
        annotations:
          lbipam.cilium.io/ips: 10.200.15.243
        externalTrafficPolicy: Cluster
        ports:
          server:
            enabled: true
            protocol: TCP
            port: &port 5000

    route:
      app:
        annotations:
          gethomepage.dev/enabled: "true"
          gethomepage.dev/group: Video
          gethomepage.dev/name: Fileflows
          gethomepage.dev/icon: fileflows.png
          gethomepage.dev/description: Distributed transcode automation
        hostnames: ["{{ .Release.Name }}.${SECRET_DOMAIN}"]
        parentRefs:
          - name: internal
            namespace: kube-system
            sectionName: https
        rules:
          - backendRefs:
              - identifier: app
                port: *port

    persistence:
      config:
        existingClaim: *app
        globalMounts:
          - path: /app/Data
            readOnly: false

      temp:
        type: emptyDir
        globalMounts:
          - path: /temp
            readOnly: false

      movies:
        type: nfs
        server: ${NAS_IP:=temp}
        path: /volume2/piNFS01/flux-cluster/media_new/media/Movies
        globalMounts:
          - path: /mnt/movies

      tv:
        type: nfs
        server: ${NAS_IP:=temp}
        path: "/volume2/piNFS01/flux-cluster/media_new/media/TV Shows"
        globalMounts:
          - path: /mnt/tv

      other-videos:
        type: nfs
        server: ${NAS_IP:=temp}
        path: "/volume2/piNFS01/flux-cluster/media_new/media/Other Videos"
        globalMounts:
          - path: /mnt/other-videos
