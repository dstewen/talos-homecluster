logging {
	level    = "warn"
	format   = "json"
	write_to = [loki.write.default.receiver]
}

// discovery.kubernetes allows you to find scrape targets from Kubernetes resources.
// It watches cluster state and ensures targets are continually synced with what is currently running in your cluster
discovery.kubernetes "pod" {
	role = "pod"
}

discovery.kubernetes "service" {
	role = "service"
}

// discovery.relabel rewrites the label set of the input targets by applying one or more relabeling rules.
// If no rules are defined, then the input targets are exported as-is.
discovery.relabel "pod_logs" {
  targets = discovery.kubernetes.pod.targets

  // Label creation - "namespace" field from "__meta_kubernetes_namespace"
  rule {
    source_labels = ["__meta_kubernetes_namespace"]
    action = "replace"
    target_label = "namespace"
  }

  // Label creation - "pod" field from "__meta_kubernetes_pod_node_name"
  rule {
    source_labels = ["__meta_kubernetes_pod_node_name"]
    action = "replace"
    target_label = "node"
  }

  // Label creation - "pod" field from "__meta_kubernetes_pod_name"
  rule {
    source_labels = ["__meta_kubernetes_pod_name"]
    action = "replace"
    target_label = "pod"
  }

  // Label creation - "container" field from "__meta_kubernetes_pod_container_name"
  rule {
    source_labels = ["__meta_kubernetes_pod_container_name"]
    action = "replace"
    target_label = "container"
  }

  // Label creation -  "app" field from "__meta_kubernetes_pod_label_app_kubernetes_io_name"
  rule {
    source_labels = ["__meta_kubernetes_pod_label_app_kubernetes_io_name"]
    action = "replace"
    target_label = "app"
  }

  // Label creation -  "job" field from "__meta_kubernetes_namespace" and "__meta_kubernetes_pod_container_name"
  // Concatenate values __meta_kubernetes_namespace/__meta_kubernetes_pod_container_name
  rule {
    source_labels = ["__meta_kubernetes_namespace", "__meta_kubernetes_pod_container_name"]
    action = "replace"
    target_label = "job"
    separator = "/"
    replacement = "$1"
  }

  // Label creation - "container" field from "__meta_kubernetes_pod_uid" and "__meta_kubernetes_pod_container_name"
  // Concatenate values __meta_kubernetes_pod_uid/__meta_kubernetes_pod_container_name.log
  rule {
    source_labels = ["__meta_kubernetes_pod_uid", "__meta_kubernetes_pod_container_name"]
    action = "replace"
    target_label = "__path__"
    separator = "/"
    replacement = "/var/log/pods/*$1/*.log"
  }

  // Label creation -  "container_runtime" field from "__meta_kubernetes_pod_container_id"
  rule {
    source_labels = ["__meta_kubernetes_pod_container_id"]
    action = "replace"
    target_label = "container_runtime"
    regex = "^(\\S+):\\/\\/.+$"
    replacement = "$1"
  }
}

discovery.relabel "loki_syslog_proxy" {
	targets = []

	rule {
		source_labels = ["__syslog_message_hostname"]
		target_label  = "hostname"
	}

	rule {
		source_labels = ["__syslog_message_severity"]
		target_label  = "level"
	}

	rule {
		source_labels = ["__syslog_message_app_name"]
		target_label  = "service_name"
	}

	rule {
		source_labels = ["__syslog_message_facility"]
		target_label  = "facility"
	}

	rule {
		source_labels = ["__syslog_connection_hostname"]
		target_label  = "connection_hostname"
	}
}

// loki.source.kubernetes tails logs from Kubernetes containers using the Kubernetes API.
loki.source.kubernetes "pod_logs" {
  targets    = discovery.relabel.pod_logs.output
  forward_to = [loki.process.pod_logs.receiver]
}

// loki.process receives log entries from other Loki components, applies one or more processing stages,
// and forwards the results to the list of receivers in the component's arguments.
loki.process "pod_logs" {
  stage.static_labels {
      values = {
        cluster = "main",
      }
  }

	forward_to = [loki.write.default.receiver]
}

// loki.source.kubernetes_events tails events from the Kubernetes API and converts them
// into log lines to forward to other Loki components.
loki.source.kubernetes_events "cluster_events" {
  job_name   = "integrations/kubernetes/eventhandler"
  log_format = "logfmt"
  forward_to = [
    loki.process.cluster_events.receiver,
  ]
}

// loki.process receives log entries from other loki components, applies one or more processing stages,
// and forwards the results to the list of receivers in the component's arguments.
loki.process "cluster_events" {
  forward_to = [loki.write.default.receiver]

  stage.static_labels {
    values = {
      cluster = "main",
    }
  }

  stage.labels {
    values = {
      kubernetes_cluster_events = "job",
    }
  }

  stage.drop {
    older_than          = "4h"
    drop_counter_reason = "too old"
  }

}

// Accept Syslog TCP 514 from OPNsense
loki.source.syslog "loki_syslog_proxy" {
  listener {
    protocol = "tcp"
    address = "10.200.15.226:514"
    labels   = {
      job = "loki.source.syslog.loki_syslog_proxy",
      service_name = "opnsense",
    }
  }

// Accept Syslog TCP 1514 from OPNsense
  listener {
    protocol = "tcp"
    address = "10.200.15.229:1514"
    labels   = {
      job = "loki.source.syslog.loki_syslog_proxy",
      service_name = "opnsense_ids",
    }
  }
  forward_to = [loki.process.loki_syslog_proxy]
  relabel_rules = discovery.relabel.loki_syslog_proxy.rules
}

loki.process "loki_syslog_proxy" {
  forward_to = [loki.write.default.receiver]

  stage.drop {
    older_than          = "4h"
    drop_counter_reason = "too old"
  }

}

loki.write "default" {
  endpoint {
    url = "http://loki-headless.monitoring.svc.cluster.local:3100/loki/api/v1/push"
  }
}
